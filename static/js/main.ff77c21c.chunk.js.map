{"version":3,"sources":["Credits/github-logo.svg","Credits/Credits.jsx","sortingAlgorithms/testScript.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/insertionSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Credits","className","href","title","height","width","src","image","alt","xmlns","viewBox","d","data-original","fill","mergeSort","array","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","doMerge","getMergeSortAnimations","animations","push","getQuickSortAnimations","quickSortHelper","pivotIdx","leftIdx","rightIdx","temp","getHeapSortAnimations","heapifyDown","buildMaxHeap","swap","parentIdx","heap","leftChildIdx","largerChildIdx","rightChildIdx","SortingVisualizer","props","state","isSorted","swal","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","disableButtons","counter","getBubbleSortAnimations","sortedArray","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","RESTORE_TIME","parseInt","restoreButtons","tempBarHeight","getInsertionSortAnimations","getElementById","disabled","javaScriptSortedArray","sort","a","b","sortingAlgorithms","console","log","arraysAreEqual","role","type","id","onClick","reload","testSortingAlgorithm","right","position","quickSort","heapSort","insertionSort","bubbleSort","map","value","idx","key","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff77c21c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.b53ff55e.svg\";","import React from \"react\";\r\nimport image from \"./github-logo.svg\";\r\nimport \"./style.css\";\r\nfunction Credits() {\r\n  return (\r\n    <div className=\"credits\">\r\n      <div className=\"github\">\r\n        <a\r\n          href=\"https://github.com/Rahul-Chauhan21/SortingVisualizer\"\r\n          title=\"Github\"\r\n        >\r\n          <img height=\"32\" width=\"32\" src={image} alt=\"GitHub\" />\r\n        </a>\r\n      </div>\r\n      <div className=\"linkedin\">\r\n        <a\r\n          href=\"https://www.linkedin.com/in/rahul-chauhan-80a32b194/\"\r\n          title=\"LinkedIn\"\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            height=\"32px\"\r\n            viewBox=\"0 0 512 512\"\r\n            width=\"32px\"\r\n          >\r\n            <g>\r\n              <script xmlns=\"\" className=\"active-path\" />\r\n              <script xmlns=\"\" className=\"active-path\" />\r\n              <path\r\n                d=\"m475.074219 0h-438.148438c-20.394531 0-36.925781 16.53125-36.925781 36.925781v438.148438c0 20.394531 16.53125 36.925781 36.925781 36.925781h438.148438c20.394531 0 36.925781-16.53125 36.925781-36.925781v-438.148438c0-20.394531-16.53125-36.925781-36.925781-36.925781zm-293.464844 387h-62.347656v-187.574219h62.347656zm-31.171875-213.1875h-.40625c-20.921875 0-34.453125-14.402344-34.453125-32.402344 0-18.40625 13.945313-32.410156 35.273437-32.410156 21.328126 0 34.453126 14.003906 34.859376 32.410156 0 18-13.53125 32.402344-35.273438 32.402344zm255.984375 213.1875h-62.339844v-100.347656c0-25.21875-9.027343-42.417969-31.585937-42.417969-17.222656 0-27.480469 11.601563-31.988282 22.800781-1.648437 4.007813-2.050781 9.609375-2.050781 15.214844v104.75h-62.34375s.816407-169.976562 0-187.574219h62.34375v26.558594c8.285157-12.78125 23.109375-30.960937 56.1875-30.960937 41.019531 0 71.777344 26.808593 71.777344 84.421874zm0 0\"\r\n                data-original=\"#000000\"\r\n                className=\"active-path\"\r\n                fill=\"#0E76A8\"\r\n              />\r\n            </g>{\" \"}\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Credits;\r\n","export function mergeSort(array) {\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray);\r\n  return array;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray) {\r\n  if (startIdx < endIdx) {\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray);\r\n  }\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= middleIdx) {\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n\r\n  while (j <= endIdx) {\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function bubbleSort(array) {\r\n  let isSorted = false;\r\n  let counter = 0;\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n    for (let i = 0; i < array.length - 1 - counter; i++) {\r\n      if (array[i] > array[i + 1]) {\r\n        const temp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = temp;\r\n        isSorted = false;\r\n      }\r\n    }\r\n    counter++;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function quickSort(array) {\r\n  quickSortHelper(array, 0, array.length - 1);\r\n  return array;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx) {\r\n  if (startIdx >= endIdx) {\r\n    return;\r\n  }\r\n\r\n  const pivotIdx = startIdx;\r\n  let leftIdx = startIdx + 1;\r\n  let rightIdx = endIdx;\r\n  while (leftIdx <= rightIdx) {\r\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n      const temp = array[leftIdx];\r\n      array[leftIdx] = array[rightIdx];\r\n      array[rightIdx] = temp;\r\n      leftIdx++;\r\n      rightIdx--;\r\n    }\r\n    if (array[leftIdx] <= array[pivotIdx]) {\r\n      leftIdx++;\r\n    }\r\n    if (array[pivotIdx] <= array[rightIdx]) {\r\n      rightIdx--;\r\n    }\r\n  }\r\n\r\n  const temp = array[pivotIdx];\r\n  array[pivotIdx] = array[rightIdx];\r\n  array[rightIdx] = temp;\r\n\r\n  const isLeftSubArraySmaller =\r\n    rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n  if (isLeftSubArraySmaller) {\r\n    quickSortHelper(array, startIdx, rightIdx - 1);\r\n    quickSortHelper(array, rightIdx + 1, endIdx);\r\n  } else {\r\n    quickSortHelper(array, rightIdx + 1, endIdx);\r\n    quickSortHelper(array, startIdx, rightIdx - 1);\r\n  }\r\n}\r\n\r\nexport function heapSort(array) {\r\n  buildMaxHeap(array);\r\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n    swap(0, endIdx, array);\r\n    heapifyDown(0, endIdx - 1, array);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction buildMaxHeap(array) {\r\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n  for (let i = firstParentIdx; i >= 0; i--) {\r\n    heapifyDown(i, array.length - 1, array);\r\n  }\r\n}\r\n\r\nfunction heapifyDown(parentIdx, endIdx, heap) {\r\n  let leftChildIdx = parentIdx * 2 + 1;\r\n  while (leftChildIdx <= endIdx) {\r\n    let largerChildIdx = leftChildIdx;\r\n    const rightChildIdx = parentIdx * 2 + 2 <= endIdx ? parentIdx * 2 + 2 : -1;\r\n    if (rightChildIdx !== -1 && heap[rightChildIdx] > heap[leftChildIdx]) {\r\n      largerChildIdx = rightChildIdx;\r\n    }\r\n    if (heap[parentIdx] > heap[largerChildIdx]) {\r\n      return;\r\n    } else {\r\n      swap(parentIdx, largerChildIdx, heap);\r\n      parentIdx = largerChildIdx;\r\n      leftChildIdx = parentIdx * 2 + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[j];\r\n  array[j] = array[i];\r\n  array[i] = temp;\r\n}\r\n\r\nexport function insertionSort(array) {\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j] < array[j - 1]) {\r\n      swap(j, j - 1, array);\r\n      j--;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n","export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n\r\n    animations.push([i, i]);\r\n\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n\r\n    animations.push([j, j]);\r\n\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\r\n  if (startIdx >= endIdx) {\r\n    return;\r\n  }\r\n\r\n  const pivotIdx = startIdx;\r\n  let leftIdx = startIdx + 1;\r\n  let rightIdx = endIdx;\r\n  while (leftIdx <= rightIdx) {\r\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n      animations.push([\"comparison1\", leftIdx, rightIdx, pivotIdx]);\r\n      animations.push([\"comparison2\", leftIdx, rightIdx, pivotIdx]);\r\n      animations.push([\"overwrite\", leftIdx, array[rightIdx], pivotIdx]);\r\n      animations.push([\"overwrite\", rightIdx, array[leftIdx], pivotIdx]);\r\n      const temp = array[leftIdx];\r\n      array[leftIdx] = array[rightIdx];\r\n      array[rightIdx] = temp;\r\n      leftIdx++;\r\n      rightIdx--;\r\n    }\r\n    if (array[leftIdx] <= array[pivotIdx]) {\r\n      animations.push([\"comparison1\", leftIdx, pivotIdx, pivotIdx]);\r\n      animations.push([\"comparison2\", leftIdx, pivotIdx, pivotIdx]);\r\n      leftIdx++;\r\n    }\r\n    if (array[pivotIdx] <= array[rightIdx]) {\r\n      animations.push([\"comparison1\", rightIdx, pivotIdx, pivotIdx]);\r\n      animations.push([\"comparison2\", rightIdx, pivotIdx, pivotIdx]);\r\n      rightIdx--;\r\n    }\r\n  }\r\n  animations.push([\"overwrite\", pivotIdx, array[rightIdx], rightIdx]);\r\n  animations.push([\"overwrite\", rightIdx, array[pivotIdx], pivotIdx]);\r\n  const temp = array[pivotIdx];\r\n  array[pivotIdx] = array[rightIdx];\r\n  array[rightIdx] = temp;\r\n\r\n  const isLeftSubArraySmaller =\r\n    rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n  if (isLeftSubArraySmaller) {\r\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n  } else {\r\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n  }\r\n}\r\n","export function getHeapSortAnimations(array) {\r\n  let animations = [];\r\n  buildMaxHeap(array, animations);\r\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n    animations.push([0, endIdx]);\r\n    swap(0, endIdx, array);\r\n    heapifyDown(0, endIdx - 1, array, animations);\r\n  }\r\n  return [animations, array];\r\n}\r\n\r\nfunction buildMaxHeap(array, animations) {\r\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n  for (let i = firstParentIdx; i >= 0; i--) {\r\n    heapifyDown(i, array.length - 1, array, animations);\r\n  }\r\n}\r\n\r\nfunction heapifyDown(parentIdx, endIdx, heap, animations) {\r\n  let leftChildIdx = parentIdx * 2 + 1;\r\n  while (leftChildIdx <= endIdx) {\r\n    let largerChildIdx = leftChildIdx;\r\n    const rightChildIdx = parentIdx * 2 + 2 <= endIdx ? parentIdx * 2 + 2 : -1;\r\n    if (rightChildIdx !== -1 && heap[rightChildIdx] > heap[leftChildIdx]) {\r\n      largerChildIdx = rightChildIdx;\r\n    }\r\n    if (heap[parentIdx] > heap[largerChildIdx]) {\r\n      return;\r\n    } else {\r\n      animations.push([parentIdx, largerChildIdx]);\r\n      swap(parentIdx, largerChildIdx, heap);\r\n      parentIdx = largerChildIdx;\r\n      leftChildIdx = parentIdx * 2 + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[j];\r\n  array[j] = array[i];\r\n  array[i] = temp;\r\n}\r\n","export function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j] < array[j - 1]) {\r\n      animations.push([\"comparison1\", j, j - 1]);\r\n      animations.push([\"comparison2\", j, j - 1]);\r\n      animations.push([\"overwrite1\", j - 1, array[j]]);\r\n      animations.push([\"overwrite2\", j, array[j - 1]]);\r\n      swap(j, j - 1, array);\r\n      j--;\r\n    }\r\n  }\r\n  return [animations, array];\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n","import React from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport * as sortingAlgorithms from \"../sortingAlgorithms/testScript.js\";\r\nimport { getBubbleSortAnimations } from \"../sortingAlgorithms/bubbleSort\";\r\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/mergeSort\";\r\nimport { getQuickSortAnimations } from \"../sortingAlgorithms/quickSort\";\r\nimport { getHeapSortAnimations } from \"../sortingAlgorithms/heapSort\";\r\nimport { getInsertionSortAnimations } from \"../sortingAlgorithms/insertionSort\";\r\nimport \"./SortingVisualizer.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"pink\";\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"blue\";\r\nconst SUDO_SORTED_COLOR = \"red\";\r\nconst SORTED_COLOR = \"#7CFC00\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      isSorted: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    swal(\"Welcome to Sorting Visualizer\");\r\n    this.resetArray();\r\n  }\r\n\r\n  reload() {\r\n    this.resetArray();\r\n  }\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 135; i++) {\r\n      array.push(randomIntFromInterval(5, 830));\r\n    }\r\n\r\n    this.setState({ array });\r\n    this.setState({ isSorted: false });\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      var ithBarStyle = arrayBars[i].style;\r\n      ithBarStyle.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n  }\r\n  bubbleSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green denotes Sorted Position\");\r\n    this.disableButtons();\r\n    const [animations, sortedArray] = getBubbleSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 4 !== 3 && i % 4 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 5);\r\n      } else {\r\n        setTimeout(() => {\r\n          if (i % 4 === 3) {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n            if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n              barOneStyle.backgroundColor = SORTED_COLOR;\r\n            }\r\n          } else {\r\n            const [barTwoIdx, newHeight] = animations[i];\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            barTwoStyle.height = `${newHeight}px`;\r\n            if (barTwoStyle.height === `${sortedArray[barTwoIdx]}px`) {\r\n              barTwoStyle.backgroundColor = SORTED_COLOR;\r\n            }\r\n          }\r\n        }, i * 5);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(5 * animations.length + 500);\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n  heapSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green denotes Sorted Position\");\r\n    this.disableButtons();\r\n    const [animations, sortedArray] = getHeapSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [barOneIdx, barTwoIdx] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n      const barTwoStyle = arrayBars[barTwoIdx].style;\r\n      setTimeout(() => {\r\n        const tempBarHeight = barOneStyle.height;\r\n        barOneStyle.height = barTwoStyle.height;\r\n        barTwoStyle.height = tempBarHeight;\r\n        if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n          barOneStyle.backgroundColor = SORTED_COLOR;\r\n        } else {\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n        if (barTwoStyle.height === `${sortedArray[barTwoIdx]}px`) {\r\n          barTwoStyle.backgroundColor = SORTED_COLOR;\r\n        } else {\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length + 500);\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n\r\n  quickSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green Denotes Sorted Position and Yellow Bar is the pivot\");\r\n    const [animations, sortedArray] = getQuickSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    this.disableButtons();\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparison1\" ||\r\n        animations[i][0] === \"comparison2\";\r\n      if (isColorChange) {\r\n        const color =\r\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, barTwoIdx, pivotIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          if (barOneStyle.height !== `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = color;\r\n          } else {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          }\r\n          if (barTwoIdx === pivotIdx) {\r\n            if (barTwoStyle.height !== `${sortedArray[barTwoIdx]}px`) {\r\n              barTwoStyle.backgroundColor = \"yellow\";\r\n            } else {\r\n              barTwoStyle.backgroundColor = SORTED_COLOR;\r\n            }\r\n          } else {\r\n            barTwoStyle.backgroundColor = color;\r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, newHeight, pivotIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${newHeight}px`;\r\n          if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          } else {\r\n            if (barOneIdx === pivotIdx) {\r\n              barOneStyle.backgroundColor = \"yellow\";\r\n            } else {\r\n              barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            }\r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length + 500);\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n  insertionSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\r\n      \"Blinking Red Bar denotes Sudo Sorted Position and Lime Green denotes Sorted Position\"\r\n    );\r\n    this.disableButtons();\r\n    const [animations, sortedArray] = getInsertionSortAnimations(\r\n      this.state.array\r\n    );\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparison1\" ||\r\n        animations[i][0] === \"comparison2\";\r\n      if (isColorChange === true) {\r\n        const color =\r\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          if (barOneStyle.height !== `${sortedArray[barOneIdx]}px`)\r\n            barOneStyle.backgroundColor = color;\r\n          else {\r\n            barOneStyle.backgroundColor = SUDO_SORTED_COLOR;\r\n          }\r\n          if (barTwoStyle.height !== `${sortedArray[barTwoIdx]}px`)\r\n            barTwoStyle.backgroundColor = color;\r\n          else {\r\n            barTwoStyle.backgroundColor = SUDO_SORTED_COLOR;\r\n          }\r\n        }, i * 5);\r\n      } else {\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${newHeight}px`;\r\n          if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          } else {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n        }, i * 5);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(5 * animations.length + 500);\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n  mergeSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green denotes Sorted Position\");\r\n    this.disableButtons();\r\n    const [animations, sortedArray] = getMergeSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          if (barOneStyle.height !== `${sortedArray[barOneIdx]}px`)\r\n            barOneStyle.backgroundColor = color;\r\n          if (barTwoStyle.height !== `${sortedArray[barTwoIdx]}px`)\r\n            barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${newHeight}px`;\r\n          if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          } else {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length + 500);\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n\r\n  disableButtons() {\r\n    document.getElementById(\"generateArray\").disabled = true;\r\n    document.getElementById(\"mergeSort\").disabled = true;\r\n    document.getElementById(\"quickSort\").disabled = true;\r\n    document.getElementById(\"heapSort\").disabled = true;\r\n    document.getElementById(\"insertionSort\").disabled = true;\r\n    document.getElementById(\"bubbleSort\").disabled = true;\r\n  }\r\n\r\n  restoreButtons() {\r\n    document.getElementById(\"generateArray\").disabled = false;\r\n    document.getElementById(\"mergeSort\").disabled = false;\r\n    document.getElementById(\"quickSort\").disabled = false;\r\n    document.getElementById(\"heapSort\").disabled = false;\r\n    document.getElementById(\"insertionSort\").disabled = false;\r\n    document.getElementById(\"bubbleSort\").disabled = false;\r\n  }\r\n\r\n  makeAllBarsGreen() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      setTimeout(() => {\r\n        const ithBarStyle = arrayBars[i].style;\r\n        ithBarStyle.backgroundColor = SORTED_COLOR;\r\n      }, i * ANIMATION_SPEED_MS * 2);\r\n    }\r\n  }\r\n\r\n  testSortingAlgorithm() {\r\n    swal(\"Currently Working on Merge Sort, Open Console\");\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const sortedArray = sortingAlgorithms.mergeSort(array);\r\n      console.log(\r\n        \"Is the SortingAlgo working ? \" +\r\n          arraysAreEqual(javaScriptSortedArray, sortedArray)\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n          <a className=\"navbar-brand \" href=\"index.html\">\r\n            Sorting Visualizer\r\n          </a>\r\n          <div className=\"navbar-nav\">\r\n            <div className=\"btn-group\" role=\"group\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-warning\"\r\n                id=\"generateArray\"\r\n                onClick={() => this.reload()}\r\n              >\r\n                Generate New Array\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => this.testSortingAlgorithm()}\r\n              >\r\n                Test Algorithms\r\n              </button>\r\n            </div>\r\n            <div\r\n              className=\"btn-group\"\r\n              role=\"group\"\r\n              style={{ right: \"10px\", position: \"absolute\" }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                id=\"mergeSort\"\r\n                onClick={() => {\r\n                  this.mergeSort();\r\n                }}\r\n              >\r\n                Merge Sort\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                id=\"quickSort\"\r\n                onClick={() => {\r\n                  this.quickSort();\r\n                }}\r\n              >\r\n                Quick Sort\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                id=\"heapSort\"\r\n                className=\"btn btn-primary\"\r\n                onClick={() => {\r\n                  this.heapSort();\r\n                }}\r\n              >\r\n                Heap Sort\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                id=\"insertionSort\"\r\n                className=\"btn btn-primary\"\r\n                onClick={() => {\r\n                  this.insertionSort();\r\n                }}\r\n              >\r\n                Insertion Sort\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                id=\"bubbleSort\"\r\n                className=\"btn btn-primary\"\r\n                onClick={() => {\r\n                  this.bubbleSort();\r\n                }}\r\n              >\r\n                Bubble Sort\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  let isSorted = false;\r\n  let counter = 0;\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n    for (let i = 0; i < array.length - 1 - counter; i++) {\r\n      if (array[i] > array[i + 1]) {\r\n        animations.push([i, i + 1]);\r\n        animations.push([i, i + 1]);\r\n        animations.push([i, array[i + 1]]);\r\n        animations.push([i + 1, array[i]]);\r\n        const temp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = temp;\r\n        isSorted = false;\r\n      }\r\n    }\r\n    counter++;\r\n  }\r\n  return [animations, array];\r\n}\r\n","import React from \"react\";\nimport Credits from \"./Credits/Credits\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Credits />\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}