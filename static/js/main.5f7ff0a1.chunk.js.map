{"version":3,"sources":["Credits/github-logo.svg","Credits/Credits.jsx","sortingAlgorithms/testScript.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/insertionSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Credits","className","href","title","height","width","src","image","alt","xmlns","viewBox","d","data-original","fill","mergeSort","array","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","doMerge","getBubbleSortAnimations","animations","isSorted","counter","push","temp","getMergeSortAnimations","getQuickSortAnimations","quickSortHelper","pivotIdx","leftIdx","rightIdx","getHeapSortAnimations","heapifyDown","buildMaxHeap","swap","parentIdx","heap","leftChildIdx","largerChildIdx","rightChildIdx","getInsertionSortAnimations","WIDTH","window","innerWidth","SortingVisualizer","props","state","isRunning","value","animationSpeed","swal","this","resetArray","setState","randomIntFromInterval","innerHeight","arrayBars","document","getElementsByClassName","style","backgroundColor","disableButtons","sortedArray","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","RESTORE_TIME","parseInt","restoreButtons","getElementById","disabled","javaScriptSortedArray","sort","a","b","sortingAlgorithms","console","log","arraysAreEqual","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","type","onClick","reload","testSortingAlgorithm","marginTop","progress","defaultValue","min","max","marginBottom","onChange","handleChange","quickSort","heapSort","insertionSort","bubbleSort","map","idx","key","React","Component","random","arrayOne","arrayTwo","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f7ff0a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.b53ff55e.svg\";","import React from \"react\";\r\nimport image from \"./github-logo.svg\";\r\nimport \"./style.css\";\r\nfunction Credits() {\r\n  return (\r\n    <div className=\"credits\">\r\n      <div className=\"github\">\r\n        <a\r\n          href=\"https://github.com/Rahul-Chauhan21/SortingVisualizer\"\r\n          title=\"Github\"\r\n        >\r\n          <img height=\"32\" width=\"32\" src={image} alt=\"GitHub\" />\r\n        </a>\r\n      </div>\r\n      <div className=\"linkedin\">\r\n        <a\r\n          href=\"https://www.linkedin.com/in/rahul-chauhan-80a32b194/\"\r\n          title=\"LinkedIn\"\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            height=\"32px\"\r\n            viewBox=\"0 0 512 512\"\r\n            width=\"32px\"\r\n          >\r\n            <g>\r\n              <script xmlns=\"\" className=\"active-path\" />\r\n              <script xmlns=\"\" className=\"active-path\" />\r\n              <path\r\n                d=\"m475.074219 0h-438.148438c-20.394531 0-36.925781 16.53125-36.925781 36.925781v438.148438c0 20.394531 16.53125 36.925781 36.925781 36.925781h438.148438c20.394531 0 36.925781-16.53125 36.925781-36.925781v-438.148438c0-20.394531-16.53125-36.925781-36.925781-36.925781zm-293.464844 387h-62.347656v-187.574219h62.347656zm-31.171875-213.1875h-.40625c-20.921875 0-34.453125-14.402344-34.453125-32.402344 0-18.40625 13.945313-32.410156 35.273437-32.410156 21.328126 0 34.453126 14.003906 34.859376 32.410156 0 18-13.53125 32.402344-35.273438 32.402344zm255.984375 213.1875h-62.339844v-100.347656c0-25.21875-9.027343-42.417969-31.585937-42.417969-17.222656 0-27.480469 11.601563-31.988282 22.800781-1.648437 4.007813-2.050781 9.609375-2.050781 15.214844v104.75h-62.34375s.816407-169.976562 0-187.574219h62.34375v26.558594c8.285157-12.78125 23.109375-30.960937 56.1875-30.960937 41.019531 0 71.777344 26.808593 71.777344 84.421874zm0 0\"\r\n                data-original=\"#000000\"\r\n                className=\"active-path\"\r\n                fill=\"#0E76A8\"\r\n              />\r\n            </g>{\" \"}\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Credits;\r\n","export function mergeSort(array) {\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray);\r\n  return array;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray) {\r\n  if (startIdx < endIdx) {\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray);\r\n  }\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= middleIdx) {\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n\r\n  while (j <= endIdx) {\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function bubbleSort(array) {\r\n  let isSorted = false;\r\n  let counter = 0;\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n    for (let i = 0; i < array.length - 1 - counter; i++) {\r\n      if (array[i] > array[i + 1]) {\r\n        const temp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = temp;\r\n        isSorted = false;\r\n      }\r\n    }\r\n    counter++;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function quickSort(array) {\r\n  quickSortHelper(array, 0, array.length - 1);\r\n  return array;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx) {\r\n  if (startIdx >= endIdx) {\r\n    return;\r\n  }\r\n\r\n  const pivotIdx = startIdx;\r\n  let leftIdx = startIdx + 1;\r\n  let rightIdx = endIdx;\r\n  while (leftIdx <= rightIdx) {\r\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n      const temp = array[leftIdx];\r\n      array[leftIdx] = array[rightIdx];\r\n      array[rightIdx] = temp;\r\n      leftIdx++;\r\n      rightIdx--;\r\n    }\r\n    if (array[leftIdx] <= array[pivotIdx]) {\r\n      leftIdx++;\r\n    }\r\n    if (array[pivotIdx] <= array[rightIdx]) {\r\n      rightIdx--;\r\n    }\r\n  }\r\n\r\n  const temp = array[pivotIdx];\r\n  array[pivotIdx] = array[rightIdx];\r\n  array[rightIdx] = temp;\r\n\r\n  const isLeftSubArraySmaller =\r\n    rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n  if (isLeftSubArraySmaller) {\r\n    quickSortHelper(array, startIdx, rightIdx - 1);\r\n    quickSortHelper(array, rightIdx + 1, endIdx);\r\n  } else {\r\n    quickSortHelper(array, rightIdx + 1, endIdx);\r\n    quickSortHelper(array, startIdx, rightIdx - 1);\r\n  }\r\n}\r\n\r\nexport function heapSort(array) {\r\n  buildMaxHeap(array);\r\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n    swap(0, endIdx, array);\r\n    heapifyDown(0, endIdx - 1, array);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction buildMaxHeap(array) {\r\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n  for (let i = firstParentIdx; i >= 0; i--) {\r\n    heapifyDown(i, array.length - 1, array);\r\n  }\r\n}\r\n\r\nfunction heapifyDown(parentIdx, endIdx, heap) {\r\n  let leftChildIdx = parentIdx * 2 + 1;\r\n  while (leftChildIdx <= endIdx) {\r\n    let largerChildIdx = leftChildIdx;\r\n    const rightChildIdx = parentIdx * 2 + 2 <= endIdx ? parentIdx * 2 + 2 : -1;\r\n    if (rightChildIdx !== -1 && heap[rightChildIdx] > heap[leftChildIdx]) {\r\n      largerChildIdx = rightChildIdx;\r\n    }\r\n    if (heap[parentIdx] > heap[largerChildIdx]) {\r\n      return;\r\n    } else {\r\n      swap(parentIdx, largerChildIdx, heap);\r\n      parentIdx = largerChildIdx;\r\n      leftChildIdx = parentIdx * 2 + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[j];\r\n  array[j] = array[i];\r\n  array[i] = temp;\r\n}\r\n\r\nexport function insertionSort(array) {\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j] < array[j - 1]) {\r\n      swap(j, j - 1, array);\r\n      j--;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  let isSorted = false;\r\n  let counter = 0;\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n    for (let i = 0; i < array.length - 1 - counter; i++) {\r\n      if (array[i] > array[i + 1]) {\r\n        animations.push([i, i + 1]);\r\n        animations.push([i, i + 1]);\r\n        animations.push([i, array[i + 1]]);\r\n        animations.push([i + 1, array[i]]);\r\n        const temp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = temp;\r\n        isSorted = false;\r\n      }\r\n    }\r\n    counter++;\r\n  }\r\n  return [animations, array];\r\n}\r\n","export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n\r\n    animations.push([i, i]);\r\n\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n\r\n    animations.push([j, j]);\r\n\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\r\n  if (startIdx >= endIdx) {\r\n    return;\r\n  }\r\n\r\n  const pivotIdx = startIdx;\r\n  let leftIdx = startIdx + 1;\r\n  let rightIdx = endIdx;\r\n  while (leftIdx <= rightIdx) {\r\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n      animations.push([\"comparison1\", leftIdx, rightIdx, pivotIdx]);\r\n      animations.push([\"comparison2\", leftIdx, rightIdx, pivotIdx]);\r\n      animations.push([\"overwrite\", leftIdx, array[rightIdx], pivotIdx]);\r\n      animations.push([\"overwrite\", rightIdx, array[leftIdx], pivotIdx]);\r\n      const temp = array[leftIdx];\r\n      array[leftIdx] = array[rightIdx];\r\n      array[rightIdx] = temp;\r\n      leftIdx++;\r\n      rightIdx--;\r\n    }\r\n    if (array[leftIdx] <= array[pivotIdx]) {\r\n      animations.push([\"comparison1\", leftIdx, pivotIdx, pivotIdx]);\r\n      animations.push([\"comparison2\", leftIdx, pivotIdx, pivotIdx]);\r\n      leftIdx++;\r\n    }\r\n    if (array[pivotIdx] <= array[rightIdx]) {\r\n      animations.push([\"comparison1\", rightIdx, pivotIdx, pivotIdx]);\r\n      animations.push([\"comparison2\", rightIdx, pivotIdx, pivotIdx]);\r\n      rightIdx--;\r\n    }\r\n  }\r\n  animations.push([\"overwrite\", pivotIdx, array[rightIdx], rightIdx]);\r\n  animations.push([\"overwrite\", rightIdx, array[pivotIdx], pivotIdx]);\r\n  const temp = array[pivotIdx];\r\n  array[pivotIdx] = array[rightIdx];\r\n  array[rightIdx] = temp;\r\n\r\n  const isLeftSubArraySmaller =\r\n    rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n  if (isLeftSubArraySmaller) {\r\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n  } else {\r\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n  }\r\n}\r\n","export function getHeapSortAnimations(array) {\r\n  let animations = [];\r\n  buildMaxHeap(array, animations);\r\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n    animations.push([\"comparison1\", 0, endIdx]);\r\n    animations.push([\"comparison2\", 0, endIdx]);\r\n    animations.push([\"overwrite\", 0, array[endIdx]]);\r\n    animations.push([\"overwrite\", endIdx, array[0]]);\r\n    swap(0, endIdx, array);\r\n    heapifyDown(0, endIdx - 1, array, animations);\r\n  }\r\n  return [animations, array];\r\n}\r\n\r\nfunction buildMaxHeap(array, animations) {\r\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n  for (let i = firstParentIdx; i >= 0; i--) {\r\n    heapifyDown(i, array.length - 1, array, animations);\r\n  }\r\n}\r\n\r\nfunction heapifyDown(parentIdx, endIdx, heap, animations) {\r\n  let leftChildIdx = parentIdx * 2 + 1;\r\n  while (leftChildIdx <= endIdx) {\r\n    let largerChildIdx = leftChildIdx;\r\n    const rightChildIdx = parentIdx * 2 + 2 <= endIdx ? parentIdx * 2 + 2 : -1;\r\n    if (rightChildIdx !== -1 && heap[rightChildIdx] > heap[leftChildIdx]) {\r\n      largerChildIdx = rightChildIdx;\r\n    }\r\n    if (heap[parentIdx] > heap[largerChildIdx]) {\r\n      return;\r\n    } else {\r\n      animations.push([\"comparison1\", parentIdx, largerChildIdx]);\r\n      animations.push([\"comparison2\", parentIdx, largerChildIdx]);\r\n      animations.push([\"overwrite\", parentIdx, heap[largerChildIdx]]);\r\n      animations.push([\"overwrite\", largerChildIdx, heap[parentIdx]]);\r\n      swap(parentIdx, largerChildIdx, heap);\r\n      parentIdx = largerChildIdx;\r\n      leftChildIdx = parentIdx * 2 + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[j];\r\n  array[j] = array[i];\r\n  array[i] = temp;\r\n}\r\n","export function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j] < array[j - 1]) {\r\n      animations.push([\"comparison1\", j, j - 1]);\r\n      animations.push([\"comparison2\", j, j - 1]);\r\n      animations.push([\"overwrite1\", j - 1, array[j]]);\r\n      animations.push([\"overwrite2\", j, array[j - 1]]);\r\n      swap(j, j - 1, array);\r\n      j--;\r\n    }\r\n  }\r\n  return [animations, array];\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n","import React from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport * as sortingAlgorithms from \"../sortingAlgorithms/testScript.js\";\r\nimport { getBubbleSortAnimations } from \"../sortingAlgorithms/bubbleSort\";\r\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/mergeSort\";\r\nimport { getQuickSortAnimations } from \"../sortingAlgorithms/quickSort\";\r\nimport { getHeapSortAnimations } from \"../sortingAlgorithms/heapSort\";\r\nimport { getInsertionSortAnimations } from \"../sortingAlgorithms/insertionSort\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport \"./SortingVisualizer.css\";\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"pink\";\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"blue\";\r\nconst SUDO_SORTED_COLOR = \"red\";\r\nconst SORTED_COLOR = \"#7CFC00\";\r\nconst WIDTH = Math.floor((0.75 * window.innerWidth) / 11);\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      isSorted: false,\r\n      isRunning: false,\r\n      value: WIDTH,\r\n      width: WIDTH,\r\n      animationSpeed: (WIDTH * 10) / WIDTH,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    swal(\"Welcome to Sorting Visualizer\");\r\n    this.resetArray(this.state.value);\r\n  }\r\n\r\n  reload() {\r\n    this.resetArray(this.state.value);\r\n  }\r\n  resetArray(width) {\r\n    this.setState({ value: width, animationSpeed: (WIDTH * 10) / width });\r\n    const array = [];\r\n    for (let i = 0; i < width; i++) {\r\n      array.push(randomIntFromInterval(5, 0.85 * window.innerHeight));\r\n    }\r\n\r\n    this.setState({ array });\r\n    this.setState({ isSorted: false });\r\n    this.setState({ isRunning: false });\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      var ithBarStyle = arrayBars[i].style;\r\n      ithBarStyle.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n  }\r\n  async bubbleSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green denotes Sorted Position\");\r\n    await this.disableButtons();\r\n    const [animations, sortedArray] = getBubbleSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 4 !== 3 && i % 4 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          if (i % 4 === 3) {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n            if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n              barOneStyle.backgroundColor = SORTED_COLOR;\r\n            }\r\n          } else {\r\n            const [barTwoIdx, newHeight] = animations[i];\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            barTwoStyle.height = `${newHeight}px`;\r\n            if (barTwoStyle.height === `${sortedArray[barTwoIdx]}px`) {\r\n              barTwoStyle.backgroundColor = SORTED_COLOR;\r\n            }\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n  async heapSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green denotes Sorted Position\");\r\n    await this.disableButtons();\r\n    const [animations, sortedArray] = getHeapSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparison1\" ||\r\n        animations[i][0] === \"comparison2\";\r\n      if (isColorChange) {\r\n        const color =\r\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          if (barOneStyle.height !== `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = color;\r\n          } else {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          }\r\n          if (barTwoStyle.height !== `${sortedArray[barTwoIdx]}px`) {\r\n            barTwoStyle.backgroundColor = color;\r\n          } else {\r\n            barTwoStyle.backgroundColor = SORTED_COLOR;\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      } else {\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${newHeight}px`;\r\n          if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          } else {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n\r\n  async quickSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green Denotes Sorted Position and Yellow Bar is the pivot\");\r\n    await this.disableButtons();\r\n    const [animations, sortedArray] = getQuickSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparison1\" ||\r\n        animations[i][0] === \"comparison2\";\r\n      if (isColorChange) {\r\n        const color =\r\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, barTwoIdx, pivotIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          if (barOneStyle.height !== `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = color;\r\n          } else {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          }\r\n          if (barTwoIdx === pivotIdx) {\r\n            if (barTwoStyle.height !== `${sortedArray[barTwoIdx]}px`) {\r\n              barTwoStyle.backgroundColor = \"yellow\";\r\n            } else {\r\n              barTwoStyle.backgroundColor = SORTED_COLOR;\r\n            }\r\n          } else {\r\n            barTwoStyle.backgroundColor = color;\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      } else {\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, newHeight, pivotIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${newHeight}px`;\r\n          if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          } else {\r\n            if (barOneIdx === pivotIdx) {\r\n              barOneStyle.backgroundColor = \"yellow\";\r\n            } else {\r\n              barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            }\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n  async insertionSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\r\n      \"Blinking Red Bar denotes Sudo Sorted Position and Lime Green denotes Sorted Position\"\r\n    );\r\n    await this.disableButtons();\r\n    const [animations, sortedArray] = getInsertionSortAnimations(\r\n      this.state.array\r\n    );\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparison1\" ||\r\n        animations[i][0] === \"comparison2\";\r\n      if (isColorChange === true) {\r\n        const color =\r\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          if (barOneStyle.height !== `${sortedArray[barOneIdx]}px`)\r\n            barOneStyle.backgroundColor = color;\r\n          else {\r\n            barOneStyle.backgroundColor = SUDO_SORTED_COLOR;\r\n          }\r\n          if (barTwoStyle.height !== `${sortedArray[barTwoIdx]}px`)\r\n            barTwoStyle.backgroundColor = color;\r\n          else {\r\n            barTwoStyle.backgroundColor = SUDO_SORTED_COLOR;\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      } else {\r\n        //eslint-disable-next-line\r\n        const [temp, barOneIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${newHeight}px`;\r\n          if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          } else {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n  async mergeSort() {\r\n    if (this.state.isSorted) {\r\n      swal(\"Already Sorted, Create a new Array\");\r\n      return;\r\n    }\r\n    swal(\"Lime Green denotes Sorted Position\");\r\n    await this.disableButtons();\r\n    const [animations, sortedArray] = getMergeSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          if (barOneStyle.height !== `${sortedArray[barOneIdx]}px`)\r\n            barOneStyle.backgroundColor = color;\r\n          if (barTwoStyle.height !== `${sortedArray[barTwoIdx]}px`)\r\n            barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animationSpeed);\r\n      } else {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${newHeight}px`;\r\n          if (barOneStyle.height === `${sortedArray[barOneIdx]}px`) {\r\n            barOneStyle.backgroundColor = SORTED_COLOR;\r\n          } else {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => this.restoreButtons(), RESTORE_TIME);\r\n    setTimeout(\r\n      () => swal(\"Array Sorted!\", \"Hope you liked it (:\", \"success\"),\r\n      RESTORE_TIME\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorted: !this.state.isSorted });\r\n    }, RESTORE_TIME);\r\n  }\r\n\r\n  disableButtons() {\r\n    this.setState({ isRunning: true });\r\n    document.getElementById(\"generateArray\").disabled = true;\r\n    document.getElementById(\"mergeSort\").disabled = true;\r\n    document.getElementById(\"quickSort\").disabled = true;\r\n    document.getElementById(\"heapSort\").disabled = true;\r\n    document.getElementById(\"insertionSort\").disabled = true;\r\n    document.getElementById(\"bubbleSort\").disabled = true;\r\n  }\r\n\r\n  restoreButtons() {\r\n    document.getElementById(\"generateArray\").disabled = false;\r\n    document.getElementById(\"mergeSort\").disabled = false;\r\n    document.getElementById(\"quickSort\").disabled = false;\r\n    document.getElementById(\"heapSort\").disabled = false;\r\n    document.getElementById(\"insertionSort\").disabled = false;\r\n    document.getElementById(\"bubbleSort\").disabled = false;\r\n  }\r\n\r\n  testSortingAlgorithm() {\r\n    swal(\"Currently Working on Merge Sort, Open Console\");\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const sortedArray = sortingAlgorithms.mergeSort(array);\r\n      console.log(\r\n        \"Is the SortingAlgo working ? \" +\r\n          arraysAreEqual(javaScriptSortedArray, sortedArray)\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange() {\r\n    const value = document.getElementById(\"myRange\").value;\r\n    this.resetArray(value);\r\n  }\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand href=\"index.html\">Sorting Visualizer</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-warning mr-2\"\r\n                id=\"generateArray\"\r\n                onClick={() => this.reload()}\r\n              >\r\n                Generate New Array\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-danger mr-2\"\r\n                onClick={() => this.testSortingAlgorithm()}\r\n              >\r\n                Test Algorithms\r\n              </button>\r\n            </Nav>\r\n            <Nav className=\"ml-auto mr-auto\">\r\n              <div className=\"slidercontainer\">\r\n                <p style={{ marginTop: 2 }}>\r\n                  Change Array size & Sorting speed\r\n                </p>\r\n                <input\r\n                  type=\"range\"\r\n                  id=\"myRange\"\r\n                  className=\"slider\"\r\n                  progress\r\n                  defaultValue={this.state.width}\r\n                  disabled={this.state.isRunning ? true : false}\r\n                  min={10}\r\n                  max={this.state.width}\r\n                  style={{\r\n                    marginTop: 2,\r\n                    marginBottom: 10,\r\n                  }}\r\n                  onChange={() => {\r\n                    this.handleChange();\r\n                  }}\r\n                />\r\n              </div>\r\n            </Nav>\r\n            <Nav className=\"ml-auto\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-success mr-2\"\r\n                id=\"mergeSort\"\r\n                onClick={() => this.mergeSort()}\r\n              >\r\n                Merge Sort\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-success mr-2\"\r\n                id=\"quickSort\"\r\n                onClick={() => {\r\n                  this.quickSort();\r\n                }}\r\n              >\r\n                Quick Sort\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                id=\"heapSort\"\r\n                className=\"btn btn-outline-success mr-2\"\r\n                onClick={() => {\r\n                  this.heapSort();\r\n                }}\r\n              >\r\n                Heap Sort\r\n              </button>\r\n\r\n              <button\r\n                type=\"button\"\r\n                id=\"insertionSort\"\r\n                className=\"btn btn-outline-success mr-2\"\r\n                onClick={() => {\r\n                  this.insertionSort();\r\n                }}\r\n              >\r\n                Insertion Sort\r\n              </button>\r\n\r\n              <button\r\n                type=\"button\"\r\n                id=\"bubbleSort\"\r\n                className=\"btn btn-outline-success mr-2\"\r\n                onClick={() => {\r\n                  this.bubbleSort();\r\n                }}\r\n              >\r\n                Bubble Sort\r\n              </button>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from \"react\";\nimport Credits from \"./Credits/Credits\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Credits />\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}