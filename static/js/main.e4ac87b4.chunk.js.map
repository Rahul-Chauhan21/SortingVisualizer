{"version":3,"sources":["Credits/github-logo.svg","Credits/Credits.jsx","SortingVisualizer/Bar.jsx","SortingVisualizer/Array.jsx","SortingVisualizer/NavBar.jsx","sortingAlgorithms/testScript.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/insertionSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Credits","className","href","title","height","width","src","image","alt","xmlns","viewBox","d","data-original","fill","Bar","style","this","props","toString","backgroundColor","color","key","value","React","Component","MAX_SIZE_DISPLAY_NUM","window","innerWidth","Array","randomArray","map","number","idx","length","NavBar","handleChange","event","resetArray","target","selectAlgorithm","onStart","algorithm","testSortingAlgorithm","isSorting","handleStop","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","type","disabled","onClick","marginTop","defaultValue","min","max","marginBottom","onChange","mergeSort","array","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","i","j","k","temp","doMerge","swap","indexOne","indexTwo","getMergeSortAnimations","animations","auxiliaryArray","slice","push","getQuickSortAnimations","quickSortHelper","pivotIdx","leftIdx","rightIdx","getHeapSortAnimations","heapifyDown","buildMaxHeap","parentIdx","heap","leftChildIdx","largerChildIdx","rightChildIdx","WIDTH","SortingVisualizer","resetColors","setState","animationSpeed","sorted","randomIntFromInterval","innerHeight","changeAlgorithm","chosen","state","startSort","swal","chosenAlgorithm","arrayBars","document","getElementsByClassName","getElementById","quickSort","heapSort","getInsertionSortAnimations","insertionSort","isSorted","counter","getBubbleSortAnimations","bubbleSort","current_color","c","highestTimeoutId","setTimeout","clearTimeout","sortedArray","javaScriptSortedArray","sort","a","b","sortingAlgorithms","console","log","arraysAreEqual","barOneIdx","barTwoIdx","changeColor","swapBars","RESTORE_TIME","parseInt","finishedSorting","lastPivotIdx","newHeight","overwriteBar","idxArray","currentColor","forEach","Fragment","random","arrayOne","arrayTwo","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4ac87b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.b53ff55e.svg\";","import React from \"react\";\r\nimport image from \"./github-logo.svg\";\r\nimport \"./style.css\";\r\nfunction Credits() {\r\n  return (\r\n    <div className=\"credits\">\r\n      <div className=\"github\">\r\n        <a\r\n          href=\"https://github.com/Rahul-Chauhan21/SortingVisualizer\"\r\n          title=\"Github\"\r\n        >\r\n          <img height=\"32\" width=\"32\" src={image} alt=\"GitHub\" />\r\n        </a>\r\n      </div>\r\n      <div className=\"linkedin\">\r\n        <a\r\n          href=\"https://www.linkedin.com/in/rahul-chauhan-80a32b194/\"\r\n          title=\"LinkedIn\"\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            height=\"32px\"\r\n            viewBox=\"0 0 512 512\"\r\n            width=\"32px\"\r\n          >\r\n            <g>\r\n              <script xmlns=\"\" className=\"active-path\" />\r\n              <script xmlns=\"\" className=\"active-path\" />\r\n              <path\r\n                d=\"m475.074219 0h-438.148438c-20.394531 0-36.925781 16.53125-36.925781 36.925781v438.148438c0 20.394531 16.53125 36.925781 36.925781 36.925781h438.148438c20.394531 0 36.925781-16.53125 36.925781-36.925781v-438.148438c0-20.394531-16.53125-36.925781-36.925781-36.925781zm-293.464844 387h-62.347656v-187.574219h62.347656zm-31.171875-213.1875h-.40625c-20.921875 0-34.453125-14.402344-34.453125-32.402344 0-18.40625 13.945313-32.410156 35.273437-32.410156 21.328126 0 34.453126 14.003906 34.859376 32.410156 0 18-13.53125 32.402344-35.273438 32.402344zm255.984375 213.1875h-62.339844v-100.347656c0-25.21875-9.027343-42.417969-31.585937-42.417969-17.222656 0-27.480469 11.601563-31.988282 22.800781-1.648437 4.007813-2.050781 9.609375-2.050781 15.214844v104.75h-62.34375s.816407-169.976562 0-187.574219h62.34375v26.558594c8.285157-12.78125 23.109375-30.960937 56.1875-30.960937 41.019531 0 71.777344 26.808593 71.777344 84.421874zm0 0\"\r\n                data-original=\"#000000\"\r\n                className=\"active-path\"\r\n                fill=\"#0E76A8\"\r\n              />\r\n            </g>{\" \"}\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Credits;\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nclass Bar extends React.Component {\r\n  render() {\r\n    const style = {\r\n      height: this.props.height.toString() + \"px\",\r\n      backgroundColor: this.props.color,\r\n    };\r\n    return (\r\n      <div key={this.props.value} className=\"array-bar\" style={style}>\r\n        {this.props.value}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bar;\r\n","import React from \"react\";\r\nimport Bar from \"./Bar\";\r\nimport \"./SortingVisualizer.css\";\r\nlet MAX_SIZE_DISPLAY_NUM = 30;\r\nif (window.innerWidth <= 420) {\r\n  MAX_SIZE_DISPLAY_NUM = 15;\r\n}\r\nclass Array extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"array-container\">\r\n        {this.props.randomArray.map((number, idx) => (\r\n          <Bar\r\n            key={idx}\r\n            height={number}\r\n            value={\r\n              this.props.randomArray.length <= MAX_SIZE_DISPLAY_NUM\r\n                ? number\r\n                : \"\"\r\n            }\r\n            color={this.props.color[idx]}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Array;\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass NavBar extends React.Component {\r\n  handleChange = (event) => {\r\n    this.props.resetArray(event.target.value);\r\n  };\r\n  render() {\r\n    const {\r\n      value,\r\n      width,\r\n      resetArray,\r\n      selectAlgorithm,\r\n      onStart,\r\n      algorithm,\r\n      testSortingAlgorithm,\r\n      isSorting,\r\n      handleStop,\r\n    } = this.props;\r\n    return (\r\n      <Navbar\r\n        className=\"bg-dark justify-content-between\"\r\n        collapseOnSelect\r\n        expand=\"lg\"\r\n        bg=\"dark\"\r\n        variant=\"dark\"\r\n      >\r\n        <Navbar.Brand>Sorting Visualizer</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-warning mr-2\"\r\n              id=\"generateArray\"\r\n              disabled={isSorting ? true : false}\r\n              onClick={() => resetArray(value)}\r\n            >\r\n              Generate New Array\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-danger mr-2\"\r\n              onClick={() => testSortingAlgorithm()}\r\n            >\r\n              Test Sorting algorithm\r\n            </button>\r\n            <button\r\n              id=\"startBtn\"\r\n              type=\"button\"\r\n              disabled={algorithm.length === 0 ? true : false}\r\n              className=\"btn btn-outline-success mr-2\"\r\n              onClick={() => onStart()}\r\n            >\r\n              Start\r\n            </button>\r\n            {isSorting ? (\r\n              <button\r\n                id=\"stopButton\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => handleStop()}\r\n              >\r\n                Stop\r\n              </button>\r\n            ) : null}\r\n          </Nav>\r\n          <Nav className=\"mx-auto\">\r\n            <div className=\"slidercontainer\">\r\n              <p style={{ marginTop: 1, color: \"white\" }}>\r\n                Change Array size & Sorting speed\r\n              </p>\r\n              <input\r\n                type=\"range\"\r\n                id=\"myRange\"\r\n                className=\"slider\"\r\n                defaultValue={width}\r\n                disabled={isSorting ? true : false}\r\n                min={15}\r\n                max={width}\r\n                style={{\r\n                  marginTop: 1,\r\n                  marginBottom: 10,\r\n                }}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </Nav>\r\n          <Nav className=\"ml-auto\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-success mr-2\"\r\n              id=\"mergeSort\"\r\n              onClick={() => selectAlgorithm(\"mergeSort\")}\r\n            >\r\n              Merge Sort\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-success mr-2\"\r\n              id=\"quickSort\"\r\n              onClick={() => selectAlgorithm(\"quickSort\")}\r\n            >\r\n              Quick Sort\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              id=\"heapSort\"\r\n              className=\"btn btn-outline-success mr-2\"\r\n              onClick={() => selectAlgorithm(\"heapSort\")}\r\n            >\r\n              Heap Sort\r\n            </button>\r\n\r\n            <button\r\n              type=\"button\"\r\n              id=\"insertionSort\"\r\n              className=\"btn btn-outline-success mr-2\"\r\n              onClick={() => selectAlgorithm(\"insertionSort\")}\r\n            >\r\n              Insertion Sort\r\n            </button>\r\n\r\n            <button\r\n              type=\"button\"\r\n              id=\"bubbleSort\"\r\n              className=\"btn btn-outline-success mr-2\"\r\n              onClick={() => selectAlgorithm(\"bubbleSort\")}\r\n            >\r\n              Bubble Sort\r\n            </button>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","export function mergeSort(array) {\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n  mergeSortHelper(array, 0, array.length - 1);\r\n  return array;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx) {\r\n  if (startIdx < endIdx) {\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(mainArray, startIdx, middleIdx);\r\n    mergeSortHelper(mainArray, middleIdx + 1, endIdx);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx);\r\n  }\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx) {\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  let k = 0;\r\n  let temp = new Array(endIdx - startIdx + 1);\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    if (mainArray[j] < mainArray[i]) {\r\n      temp[k++] = mainArray[j++];\r\n    } else {\r\n      temp[k++] = mainArray[i++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    temp[k++] = mainArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    temp[k++] = mainArray[j++];\r\n  }\r\n\r\n  for (let i = startIdx; i <= endIdx; i++) {\r\n    mainArray[i] = temp[i - startIdx];\r\n  }\r\n}\r\n\r\nexport function bubbleSort(array) {\r\n  let isSorted = false;\r\n  let counter = 0;\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n    for (let i = 0; i < array.length - 1 - counter; i++) {\r\n      if (array[i] > array[i + 1]) {\r\n        const temp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = temp;\r\n        isSorted = false;\r\n      }\r\n    }\r\n    counter++;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function quickSort(array) {\r\n  quickSortHelper(array, 0, array.length - 1);\r\n  return array;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx) {\r\n  if (startIdx >= endIdx) {\r\n    return;\r\n  }\r\n\r\n  const pivotIdx = startIdx;\r\n  let leftIdx = startIdx + 1;\r\n  let rightIdx = endIdx;\r\n  while (leftIdx <= rightIdx) {\r\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n      const temp = array[leftIdx];\r\n      array[leftIdx] = array[rightIdx];\r\n      array[rightIdx] = temp;\r\n      leftIdx++;\r\n      rightIdx--;\r\n    }\r\n    if (array[leftIdx] <= array[pivotIdx]) {\r\n      leftIdx++;\r\n    }\r\n    if (array[pivotIdx] <= array[rightIdx]) {\r\n      rightIdx--;\r\n    }\r\n  }\r\n\r\n  const temp = array[pivotIdx];\r\n  array[pivotIdx] = array[rightIdx];\r\n  array[rightIdx] = temp;\r\n\r\n  const isLeftSubArraySmaller =\r\n    rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n  if (isLeftSubArraySmaller) {\r\n    quickSortHelper(array, startIdx, rightIdx - 1);\r\n    quickSortHelper(array, rightIdx + 1, endIdx);\r\n  } else {\r\n    quickSortHelper(array, rightIdx + 1, endIdx);\r\n    quickSortHelper(array, startIdx, rightIdx - 1);\r\n  }\r\n}\r\n\r\nexport function heapSort(array) {\r\n  buildMaxHeap(array);\r\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n    swap(0, endIdx, array);\r\n    heapifyDown(0, endIdx - 1, array);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction buildMaxHeap(array) {\r\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n  for (let i = firstParentIdx; i >= 0; i--) {\r\n    heapifyDown(i, array.length - 1, array);\r\n  }\r\n}\r\n\r\nfunction heapifyDown(parentIdx, endIdx, heap) {\r\n  let leftChildIdx = parentIdx * 2 + 1;\r\n  while (leftChildIdx <= endIdx) {\r\n    let largerChildIdx = leftChildIdx;\r\n    const rightChildIdx = parentIdx * 2 + 2 <= endIdx ? parentIdx * 2 + 2 : -1;\r\n    if (rightChildIdx !== -1 && heap[rightChildIdx] > heap[leftChildIdx]) {\r\n      largerChildIdx = rightChildIdx;\r\n    }\r\n    if (heap[parentIdx] > heap[largerChildIdx]) {\r\n      return;\r\n    } else {\r\n      swap(parentIdx, largerChildIdx, heap);\r\n      parentIdx = largerChildIdx;\r\n      leftChildIdx = parentIdx * 2 + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[j];\r\n  array[j] = array[i];\r\n  array[i] = temp;\r\n}\r\n\r\nexport function insertionSort(array) {\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j] < array[j - 1]) {\r\n      swap(j, j - 1, array);\r\n      j--;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  let isSorted = false;\r\n  let counter = 0;\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n    for (let i = 0; i < array.length - 1 - counter; i++) {\r\n      animations.push([\"comparing\", i, i + 1]);\r\n      if (array[i] > array[i + 1]) {\r\n        animations.push([\"swapping\", i, i + 1]);\r\n        swap(array, i, i + 1);\r\n        isSorted = false;\r\n      }\r\n    }\r\n    counter++;\r\n  }\r\n  return animations;\r\n}\r\nfunction swap(array, indexOne, indexTwo) {\r\n  const temp = array[indexOne];\r\n  array[indexOne] = array[indexTwo];\r\n  array[indexTwo] = temp;\r\n}\r\n","export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([\"comparing\", i, j, null]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([\"overwriting\", k, i, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([\"overwriting\", k, j, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([\"overwriting\", k, i, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([\"overwriting\", k, j, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\r\n  if (startIdx >= endIdx) {\r\n    return;\r\n  }\r\n\r\n  const pivotIdx = startIdx;\r\n  let leftIdx = startIdx + 1;\r\n  let rightIdx = endIdx;\r\n  while (leftIdx <= rightIdx) {\r\n    animations.push([\"comparing\", leftIdx, rightIdx, pivotIdx]);\r\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n      animations.push([\"swapping\", leftIdx, rightIdx, pivotIdx]);\r\n      swap(array, leftIdx, rightIdx);\r\n      leftIdx++;\r\n      rightIdx--;\r\n    }\r\n    if (array[leftIdx] <= array[pivotIdx]) {\r\n      leftIdx++;\r\n    }\r\n    if (array[pivotIdx] <= array[rightIdx]) {\r\n      rightIdx--;\r\n    }\r\n  }\r\n  animations.push([\"swapping\", pivotIdx, rightIdx, pivotIdx]);\r\n  swap(array, pivotIdx, rightIdx);\r\n\r\n  const isLeftSubArraySmaller =\r\n    rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n  if (isLeftSubArraySmaller) {\r\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n  } else {\r\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n  }\r\n}\r\n\r\nfunction swap(array, indexOne, indexTwo) {\r\n  if (array[indexOne] === array[indexTwo]) {\r\n    return;\r\n  }\r\n  const temp = array[indexOne];\r\n  array[indexOne] = array[indexTwo];\r\n  array[indexTwo] = temp;\r\n}\r\n","export function getHeapSortAnimations(array) {\r\n  let animations = [];\r\n  buildMaxHeap(array, animations);\r\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n    animations.push([\"swapping\", 0, endIdx]);\r\n    swap(0, endIdx, array);\r\n    heapifyDown(0, endIdx - 1, array, animations);\r\n  }\r\n  return animations;\r\n}\r\n\r\nfunction buildMaxHeap(array, animations) {\r\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n  for (let i = firstParentIdx; i >= 0; i--) {\r\n    heapifyDown(i, array.length - 1, array, animations);\r\n  }\r\n}\r\n\r\nfunction heapifyDown(parentIdx, endIdx, heap, animations) {\r\n  let leftChildIdx = parentIdx * 2 + 1;\r\n  while (leftChildIdx <= endIdx) {\r\n    let largerChildIdx = leftChildIdx;\r\n    const rightChildIdx = parentIdx * 2 + 2 <= endIdx ? parentIdx * 2 + 2 : -1;\r\n    if (rightChildIdx !== -1 && heap[rightChildIdx] > heap[leftChildIdx]) {\r\n      largerChildIdx = rightChildIdx;\r\n    }\r\n    if (heap[parentIdx] > heap[largerChildIdx]) {\r\n      return;\r\n    } else {\r\n      animations.push([\"comparing\", parentIdx, largerChildIdx]);\r\n      animations.push([\"swapping\", parentIdx, largerChildIdx]);\r\n      swap(parentIdx, largerChildIdx, heap);\r\n      parentIdx = largerChildIdx;\r\n      leftChildIdx = parentIdx * 2 + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[j];\r\n  array[j] = array[i];\r\n  array[i] = temp;\r\n}\r\n","export function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j] < array[j - 1]) {\r\n      animations.push([\"comparing\", j, j - 1]);\r\n      animations.push([\"swapping\", j, j - 1]);\r\n      swap(j, j - 1, array);\r\n      j--;\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n","import React from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport Array from \"./Array\";\r\nimport NavBar from \"./NavBar\";\r\nimport * as sortingAlgorithms from \"../sortingAlgorithms/testScript.js\";\r\nimport { getBubbleSortAnimations } from \"../sortingAlgorithms/bubbleSort\";\r\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/mergeSort\";\r\nimport { getQuickSortAnimations } from \"../sortingAlgorithms/quickSort\";\r\nimport { getHeapSortAnimations } from \"../sortingAlgorithms/heapSort\";\r\nimport { getInsertionSortAnimations } from \"../sortingAlgorithms/insertionSort\";\r\nimport \"./SortingVisualizer.css\";\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"pink\";\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"#5e64ff\";\r\nconst SWAP_COLOR = \"red\";\r\nconst PIVOT_COLOR = \"yellow\";\r\nconst WIDTH = Math.floor((0.75 * window.innerWidth) / 10);\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      color: [],\r\n      value: WIDTH,\r\n      width: WIDTH,\r\n      isSorting: false,\r\n      sorted: false,\r\n      algorithm: \"\",\r\n      animationSpeed: (WIDTH * 50) / WIDTH,\r\n    };\r\n  }\r\n  // Creates a random array when app is loaded\r\n  componentDidMount() {\r\n    swal(\"Welcome to Sorting Visualizer\");\r\n    this.resetArray(this.state.value);\r\n  }\r\n\r\n  // generates a new array and enables the slider range\r\n  resetArray = (width) => {\r\n    this.resetColors();\r\n    this.setState({\r\n      value: width,\r\n      animationSpeed: Math.floor((WIDTH * 50) / width),\r\n      sorted: false,\r\n    });\r\n    const array = [];\r\n    for (let i = 0; i < width; i++) {\r\n      array.push(randomIntFromInterval(15, 0.85 * window.innerHeight));\r\n    }\r\n    const color = array.map((number) => PRIMARY_COLOR);\r\n    this.setState({ array: array, color: color });\r\n  };\r\n  // updates the state algorithm\r\n  changeAlgorithm = (chosen) => {\r\n    if (this.state.isSorting) {\r\n      return;\r\n    }\r\n    this.setState({ algorithm: chosen });\r\n  };\r\n\r\n  startSort = () => {\r\n    if (this.state.sorted) {\r\n      swal(\"Already Sorted! Create a new Array\");\r\n      return;\r\n    }\r\n    if (this.state.isSorting) {\r\n      return;\r\n    }\r\n    const chosenAlgorithm = this.state.algorithm;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    var array = this.state.array.slice();\r\n    if (chosenAlgorithm.length > 0) {\r\n      document.getElementById(\"startBtn\").disabled = false;\r\n      if (chosenAlgorithm === \"mergeSort\") {\r\n        let animations = getMergeSortAnimations(array);\r\n        this.mergeSort(animations, arrayBars);\r\n      } else if (chosenAlgorithm === \"quickSort\") {\r\n        let animations = getQuickSortAnimations(array);\r\n        this.quickSort(animations, arrayBars);\r\n      } else if (chosenAlgorithm === \"heapSort\") {\r\n        let animations = getHeapSortAnimations(array);\r\n        this.heapSort(animations, arrayBars);\r\n      } else if (chosenAlgorithm === \"insertionSort\") {\r\n        let animations = getInsertionSortAnimations(array);\r\n        this.insertionSort(animations, arrayBars);\r\n      } else if (chosenAlgorithm === \"bubbleSort\") {\r\n        let animations = getBubbleSortAnimations(array);\r\n        this.bubbleSort(animations, arrayBars);\r\n      }\r\n    }\r\n  };\r\n\r\n  resetColors = () => {\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      arrayBars[i].className = \"array-bar\";\r\n    }\r\n    var current_color = this.state.color.slice();\r\n    this.setState({ color: current_color.map((c) => PRIMARY_COLOR) });\r\n  };\r\n  changeColor(idxArray, color) {\r\n    let currentColor = this.state.color.slice();\r\n    idxArray.forEach(function (idx, c = 0) {\r\n      currentColor[idx] = color[c++];\r\n    });\r\n    this.setState({ color: currentColor });\r\n  }\r\n  finishedSorting() {\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      arrayBars[i].className = \"array-bar bar-animation\";\r\n    }\r\n  }\r\n  swapBars(indexOne, indexTwo) {\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const temp = auxiliaryArray[indexOne];\r\n    auxiliaryArray[indexOne] = auxiliaryArray[indexTwo];\r\n    auxiliaryArray[indexTwo] = temp;\r\n    this.setState({ array: auxiliaryArray });\r\n  }\r\n\r\n  overwriteBar(indexOne, newHeight) {\r\n    const auxiliaryArray = this.state.array.slice();\r\n    auxiliaryArray[indexOne] = newHeight;\r\n    this.setState({ array: auxiliaryArray });\r\n  }\r\n  handleStop = () => {\r\n    const highestTimeoutId = setTimeout(\";\");\r\n    for (let i = 0; i < highestTimeoutId; i++) {\r\n      clearTimeout(i);\r\n    }\r\n    this.setState({ isSorting: false });\r\n  };\r\n  testSortingAlgorithm = () => {\r\n    if (this.state.algorithm === \"\") {\r\n      swal(\"Select an Algorithm\");\r\n      return;\r\n    }\r\n    swal(\"Open Console\");\r\n    let chosenAlgorithm = this.state.algorithm;\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      let sortedArray = {};\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      if (chosenAlgorithm.length > 0) {\r\n        if (chosenAlgorithm === \"mergeSort\") {\r\n          sortedArray = sortingAlgorithms.mergeSort(array);\r\n        } else if (chosenAlgorithm === \"quickSort\") {\r\n          sortedArray = sortingAlgorithms.mergeSort(array);\r\n        } else if (chosenAlgorithm === \"heapSort\") {\r\n          sortedArray = sortingAlgorithms.mergeSort(array);\r\n        } else if (chosenAlgorithm === \"insertionSort\") {\r\n          sortedArray = sortingAlgorithms.mergeSort(array);\r\n        } else if (chosenAlgorithm === \"bubbleSort\") {\r\n          sortedArray = sortingAlgorithms.mergeSort(array);\r\n        }\r\n      }\r\n      console.log(\r\n        `Is ${chosenAlgorithm} the working ? ` +\r\n          arraysAreEqual(javaScriptSortedArray, sortedArray)\r\n      );\r\n    }\r\n  };\r\n\r\n  // Animations array: [state, i , i + 1]\r\n  bubbleSort = (animations, arrayBars) => {\r\n    this.setState({ isSorting: true });\r\n    this.resetColors();\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [state, barOneIdx, barTwoIdx] = animations[i];\r\n      // Change color depending on the state from animations[i]\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          state === \"comparing\"\r\n            ? [SECONDARY_COLOR, SECONDARY_COLOR]\r\n            : [SWAP_COLOR, SWAP_COLOR]\r\n        );\r\n      }, i * this.state.animationSpeed);\r\n      if (state === \"swapping\") {\r\n        setTimeout(() => {\r\n          this.swapBars(barOneIdx, barTwoIdx);\r\n        }, (i + 1 / 3) * this.state.animationSpeed);\r\n      }\r\n      // Revert back to original color.\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          [PRIMARY_COLOR, PRIMARY_COLOR]\r\n        );\r\n      }, (i + 2 / 3) * this.state.animationSpeed);\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    // turn all bars green and restore buttons\r\n    setTimeout(() => {\r\n      this.setState({ isSorting: false, sorted: true });\r\n      this.finishedSorting();\r\n    }, RESTORE_TIME);\r\n  };\r\n  // Animations array: [state, barOne, barTwo]\r\n  heapSort = (animations, arrayBars) => {\r\n    this.resetColors();\r\n    this.setState({ isSorting: true });\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [state, barOneIdx, barTwoIdx] = animations[i];\r\n      // Change color depending on the state from animations[i]\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          state === \"comparing\"\r\n            ? [SECONDARY_COLOR, SECONDARY_COLOR]\r\n            : [SWAP_COLOR, SWAP_COLOR]\r\n        );\r\n      }, i * this.state.animationSpeed);\r\n      if (state === \"swapping\") {\r\n        setTimeout(() => {\r\n          this.swapBars(barOneIdx, barTwoIdx);\r\n        }, (i + 1 / 3) * this.state.animationSpeed);\r\n      }\r\n      // Revert back to original color.\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          [PRIMARY_COLOR, PRIMARY_COLOR]\r\n        );\r\n      }, (i + 2 / 3) * this.state.animationSpeed);\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    //Turn all bars green.\r\n    setTimeout(() => {\r\n      this.setState({ isSorting: false, sorted: true });\r\n      this.finishedSorting();\r\n    }, RESTORE_TIME);\r\n  };\r\n  // Animations array: [state, barOne, barTwo, pivotIdx]\r\n  quickSort = (animations, arrayBars) => {\r\n    this.resetColors();\r\n    this.setState({ isSorting: true });\r\n    let lastPivotIdx = -1;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [state, barOneIdx, barTwoIdx, pivotIdx] = animations[i];\r\n      if (/*eslint-disable-next-line*/ pivotIdx !== lastPivotIdx) {\r\n        setTimeout(() => {\r\n          this.changeColor(\r\n            [lastPivotIdx, pivotIdx],\r\n            [PRIMARY_COLOR, PIVOT_COLOR]\r\n          );\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx, pivotIdx],\r\n          state === \"comparing\"\r\n            ? [SECONDARY_COLOR, SECONDARY_COLOR, PIVOT_COLOR]\r\n            : [SWAP_COLOR, SWAP_COLOR, PIVOT_COLOR]\r\n        );\r\n      }, i * this.state.animationSpeed);\r\n      if (state === \"swapping\") {\r\n        setTimeout(() => {\r\n          if (barOneIdx === pivotIdx) {\r\n            if (arrayBars[barOneIdx] !== arrayBars[pivotIdx])\r\n              this.changeColor([pivotIdx], [SWAP_COLOR]);\r\n          }\r\n          this.swapBars(barOneIdx, barTwoIdx);\r\n        }, (i + 1 / 3) * this.state.animationSpeed);\r\n      }\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          [PRIMARY_COLOR, PRIMARY_COLOR]\r\n        );\r\n      }, (i + 2 / 3) * this.state.animationSpeed);\r\n      // eslint-disable-next-line;\r\n      lastPivotIdx = pivotIdx;\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorting: false, sorted: true });\r\n      this.finishedSorting();\r\n    }, RESTORE_TIME);\r\n  };\r\n  //Animations array: [state, j, j -1]\r\n  insertionSort(animations, arrayBars) {\r\n    this.resetColors();\r\n    this.setState({ isSorting: true });\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [state, barOneIdx, barTwoIdx] = animations[i];\r\n      // Change color depending on the state from animations[i]\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          state === \"comparing\"\r\n            ? [SECONDARY_COLOR, SECONDARY_COLOR]\r\n            : [SWAP_COLOR, SWAP_COLOR]\r\n        );\r\n      }, i * this.state.animationSpeed);\r\n      if (state === \"swapping\") {\r\n        setTimeout(() => {\r\n          this.swapBars(barOneIdx, barTwoIdx);\r\n        }, (i + 1 / 3) * this.state.animationSpeed);\r\n      }\r\n      // Revert back to original color.\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          [PRIMARY_COLOR, PRIMARY_COLOR]\r\n        );\r\n      }, (i + 2 / 3) * this.state.animationSpeed);\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorting: false, sorted: true });\r\n      this.finishedSorting();\r\n    }, RESTORE_TIME);\r\n  }\r\n  //Animations array: if state = \"comparing\" [state, k index, index i/j, null]\r\n  //                             \"swapping\" [state, i index, j index, height]\r\n  mergeSort = (animations, arrayBars) => {\r\n    this.setState({ isSorting: true });\r\n    this.resetColors();\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [state, barOneIdx, barTwoIdx, newHeight] = animations[i];\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          state === \"comparing\"\r\n            ? [SECONDARY_COLOR, SECONDARY_COLOR]\r\n            : [PRIMARY_COLOR, PRIMARY_COLOR]\r\n        );\r\n      }, i * this.state.animationSpeed);\r\n      if (state === \"overwriting\") {\r\n        setTimeout(() => {\r\n          this.changeColor([barOneIdx], [SWAP_COLOR]);\r\n          this.overwriteBar(barOneIdx, newHeight);\r\n        }, (i + 1 / 3) * this.state.animationSpeed);\r\n      }\r\n      // Revert back to original color.\r\n      setTimeout(() => {\r\n        this.changeColor(\r\n          [barOneIdx, barTwoIdx],\r\n          [PRIMARY_COLOR, PRIMARY_COLOR]\r\n        );\r\n      }, (i + 2 / 3) * this.state.animationSpeed);\r\n    }\r\n    const RESTORE_TIME = parseInt(\r\n      this.state.animationSpeed * animations.length + 500\r\n    );\r\n    setTimeout(() => {\r\n      this.setState({ isSorting: false, sorted: true });\r\n      this.finishedSorting();\r\n    }, RESTORE_TIME);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar\r\n          value={this.state.value}\r\n          width={this.state.width}\r\n          resetArray={this.resetArray}\r\n          selectAlgorithm={this.changeAlgorithm}\r\n          onStart={this.startSort}\r\n          algorithm={this.state.algorithm}\r\n          testSortingAlgorithm={this.testSortingAlgorithm}\r\n          isSorting={this.state.isSorting}\r\n          handleStop={this.handleStop}\r\n        />\r\n        <Array randomArray={this.state.array} color={this.state.color} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from \"react\";\nimport Credits from \"./Credits/Credits\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Credits />\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}